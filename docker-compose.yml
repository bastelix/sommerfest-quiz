services:
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs:ro
      - ./vhost.d:/etc/nginx/vhost.d
      - htmldata:/usr/share/nginx/html
      - confd:/etc/nginx/conf.d
      - dhparam:/etc/nginx/dhparam
    labels:
      com.github.nginx-proxy.nginx: "true"
    networks:
      - webproxy

  docker-gen:
    build:
      context: ./docker-gen
    container_name: docker-gen
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:rw
      - ./vhost.d:/etc/nginx/vhost.d
      - htmldata:/usr/share/nginx/html
      - confd:/etc/nginx/conf.d
      - nginx_template:/etc/docker-gen/templates
    command: >
      -notify-sighup nginx
      -watch
      /etc/docker-gen/templates/nginx.tmpl
      /etc/nginx/conf.d/default.conf
    labels:
      com.github.nginx-proxy.docker-gen: "true"
    networks:
      - webproxy

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: acme-companion
    restart: unless-stopped
    environment:
      - NGINX_PROXY_CONTAINER=nginx
      - NGINX_DOCKER_GEN_CONTAINER=docker-gen
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs:rw
      - acme:/etc/acme.sh
      - ./vhost.d:/etc/nginx/vhost.d
      - htmldata:/usr/share/nginx/html
    networks:
      - webproxy

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - webproxy

  adminer:
    image: adminer
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=adminer.${DOMAIN}
      - LETSENCRYPT_HOST=adminer.${DOMAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - ADMINER_DEFAULT_SERVER=postgres
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - webproxy

  slim:
    build: .
    container_name: slim-1
    working_dir: /var/www
    volumes:
      - ./:/var/www
      # Mount custom PHP settings (overrides copy in Dockerfile)
      - ./config/php.ini:/usr/local/etc/php/conf.d/custom.ini:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=${SLIM_VIRTUAL_HOST:-${DOMAIN}}
      - LETSENCRYPT_HOST=${SLIM_VIRTUAL_HOST:-${DOMAIN}}
      - VIRTUAL_PORT=8080
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - POSTGRES_DSN=${POSTGRES_DSN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TENANT_ID=${TENANT_ID}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME}
      - NGINX_RELOAD_TOKEN=${NGINX_RELOAD_TOKEN}
      - NGINX_RELOADER_URL=${NGINX_RELOADER_URL}
      - STRIPE_SANDBOX=${STRIPE_SANDBOX:-0}
      - STRIPE_SANDBOX_SECRET_KEY=${STRIPE_SANDBOX_SECRET_KEY:-}
      - STRIPE_SANDBOX_PUBLISHABLE_KEY=${STRIPE_SANDBOX_PUBLISHABLE_KEY:-}
      - STRIPE_SANDBOX_PRICE_STARTER=${STRIPE_SANDBOX_PRICE_STARTER:-}
      - STRIPE_SANDBOX_PRICE_STANDARD=${STRIPE_SANDBOX_PRICE_STANDARD:-}
      - STRIPE_SANDBOX_PRICE_PROFESSIONAL=${STRIPE_SANDBOX_PRICE_PROFESSIONAL:-}
      - STRIPE_SANDBOX_PRICING_TABLE_ID=${STRIPE_SANDBOX_PRICING_TABLE_ID:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_PRICE_STARTER=${STRIPE_PRICE_STARTER:-}
      - STRIPE_PRICE_STANDARD=${STRIPE_PRICE_STANDARD:-}
      - STRIPE_PRICE_PROFESSIONAL=${STRIPE_PRICE_PROFESSIONAL:-}
      - STRIPE_PRICING_TABLE_ID=${STRIPE_PRICING_TABLE_ID:-}
    depends_on:
      - postgres
    command: php -S 0.0.0.0:8080 -t public public/router.php
    expose:
      - "8080"
    ports:
    - "8080:8080"
    labels:
      - "com.github.nginx-proxy.expose=true"
    networks:
      - webproxy

  nginx-reloader:
    build: ./nginx-reloader
    environment:
      - NGINX_RELOAD_TOKEN=${NGINX_RELOAD_TOKEN}
      - NGINX_CONTAINER=${NGINX_CONTAINER:-nginx}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - webproxy

networks:
  webproxy:
    name: webproxy
    external: true

volumes:
  certs:
  htmldata:
  confd:
  acme:
  dhparam:
  nginx_template:
  pgdata:
